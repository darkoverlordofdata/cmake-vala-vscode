cmake_minimum_required ( VERSION 3.1 )
###################################################################################
#
#   Build alliance
#
###################################################################################
project ( alliance VERSION 0.0.1 )

#
# enable features
#
include ( CMakeToolsHelpers OPTIONAL )
list ( APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/adria)
find_package (PkgConfig)
find_package (Vala REQUIRED)

#
#   libraries - sources & packages
#
add_subdirectory ( .lib/mt19937 )
add_subdirectory ( .lib/zerog )
if (EXISTS ${CMAKE_SOURCE_DIR}/data AND NOT DEFINED ZEROG )
    add_subdirectory (data)
    list ( APPEND RESOURCES ${resources_gresource_xml_C_FILE} )
endif ()

#
#   generated code configuration
#
configure_file ( 
    ${CMAKE_SOURCE_DIR}/src/Config.vala.base 
    ${CMAKE_BINARY_DIR}/src/Config.vala 
)
file (RELATIVE_PATH CONFIG_VALA ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}/src/Config.vala)

#
#   out of tree build location
#
configure_file ( src/Factory.vala src/Factory.vala )
configure_file ( src/Game.vala src/Game.vala )
configure_file ( src/alliance.vala src/alliance.vala )
configure_file ( src/components.vala src/components.vala )
configure_file ( src/entity.vala src/entity.vala )
configure_file ( src/system.vala src/system.vala )
#
#   application source
#
list ( APPEND VALA_SOURCES ${CONFIG_VALA} )
list ( APPEND VALA_SOURCES build/src/Factory.vala )
list ( APPEND VALA_SOURCES build/src/Game.vala )
list ( APPEND VALA_SOURCES build/src/alliance.vala )
list ( APPEND VALA_SOURCES build/src/components.vala )
list ( APPEND VALA_SOURCES build/src/entity.vala )
list ( APPEND VALA_SOURCES build/src/system.vala )
#
#   pkg-config dependencies
#
# list ( APPEND PACKAGES sdl2 )
# list ( APPEND PACKAGES SDL2_image )
# list ( APPEND PACKAGES SDL2_mixer )
# list ( APPEND PACKAGES SDL2_ttf )
# pkg_check_modules (DEPS REQUIRED ${PACKAGES})

add_definitions ( ${DEPS_CFLAGS} )
link_libraries ( ${DEPS_LIBRARIES} )
link_directories ( ${DEPS_LIBRARY_DIRS} )


#
#   compiler options
#
list ( APPEND VALAC_OPTIONS --disable-warnings --enable-experimental )
list ( APPEND VALAC_OPTIONS --vapidir=${CMAKE_SOURCE_DIR}/src/vapis)

set ( VALAC_OPTIONS "${VALAC_OPTIONS};--define=EMSCRIPTEN" )
set ( CUSTOM_VAPIS  "${CUSTOM_VAPIS};${CMAKE_SOURCE_DIR}/src/vapis/emscripten.vapi" )
set ( INCLUDES "${INCLUDES}; /home/bruce/emsdk/emscripten/incoming/system/include" )
set ( INCLUDES "${INCLUDES}; .lib/include" )

set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s WASM=1 -s USE_SDL=2 -s USE_SDL_TTF=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='[\"png\"]'" ) 


if (WIN32)  
    set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mwindows" )
endif ()
set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w -std=c99 -O3" )

include_directories(AFTER ${INCLUDES})
#
#   compile vala code
#
include (ValaVersion)
ensure_vala_version (0.26 MINIMUM)
include (ValaPrecompile)
vala_precompile (
    VALA_C ${PROJECT_NAME}
        ${VALA_SOURCES}
    PACKAGES
        ${PACKAGES}
    CUSTOM_VAPIS
        ${CUSTOM_VAPIS}
    OPTIONS
        ${VALAC_OPTIONS}
    )

#
#   compile ccode & link executable
#
add_executable ( ${PROJECT_NAME} ${VALA_C} ${C_SOURCES} ${RESOURCES} )
target_link_libraries ( ${PROJECT_NAME} m )
install (TARGETS ${PROJECT_NAME} RUNTIME DESTINATION . )

if (EXISTS ${CMAKE_SOURCE_DIR}/data AND DEFINED ZEROG)
    install ( DIRECTORY ${CMAKE_SOURCE_DIR}/data/assets DESTINATION . )
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} 
            -E 
            copy_directory
            ${CMAKE_SOURCE_DIR}/data/assets 
            $<TARGET_FILE_DIR:${PROJECT_NAME}>/assets 
    )    
elseif (EXISTS ${CMAKE_SOURCE_DIR}/assets)
    install ( DIRECTORY ${CMAKE_SOURCE_DIR}/assets DESTINATION . )
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} 
            -E 
            copy_directory
            ${CMAKE_SOURCE_DIR}/assets 
            $<TARGET_FILE_DIR:${PROJECT_NAME}>/assets 
    )    
endif ()

include (CPack)

# (generated from template: adria. Do not modify. )
