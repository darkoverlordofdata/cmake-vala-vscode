    project (hello-world)

    cmake_minimum_required (VERSION 3.1)
    include (CMakeToolsHelpers OPTIONAL)

    list (APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/vala)
    list (APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/SDL2)
    
    set (EXEC_NAME "hello-world")
    set (RELEASE_NAME "A hello world.")
    set (VERSION "0.0.1")
    set (VERSION_INFO "whats up world")

    # phase I - generate ccode from the vala source
    find_package (PkgConfig)
    pkg_check_modules (
        DEPS REQUIRED 
            gee-0.8
            gio-2.0
            glib-2.0
            gobject-2.0
    )
    
    add_definitions (${DEPS_CFLAGS})
    link_libraries (${DEPS_LIBRARIES})
    link_directories (${DEPS_LIBRARY_DIRS})
    
    find_package (Vala REQUIRED)
    include (ValaVersion)
    ensure_vala_version ("0.30" MINIMUM)
    include (ValaPrecompile)
    
    vala_precompile (
        VALA_C ${EXEC_NAME}
            src/Bosco/AbstractGame.gs
            src/Bosco/Bag.gs
            src/Bosco/ECS/CoreTest.vala
            src/Bosco/ECS/EntityBase.gs
            src/Bosco/ECS/EntityPool.vala
            src/Bosco/ECS/Exceptions.gs
            src/Bosco/ECS/Group.gs
            src/Bosco/ECS/Matcher.gs
            src/Bosco/ECS/WorldBase.gs
            src/Bosco/Events/ComponentReplaced.gs
            src/Bosco/Events/EntityChanged.gs
            src/Bosco/Events/EntityReleased.gs
            src/Bosco/Events/GroupChanged.gs
            src/Bosco/Events/GroupUpdated.gs
            src/Bosco/Events/GroupsChanged.gs
            src/Bosco/Events/WorldChanged.gs
            src/Bosco/Interfaces/IComponent.vala
            src/Bosco/Interfaces/IMatcher.vala
            src/Bosco/Interfaces/ISystem.vala
            src/Bosco/Sprite.gs
            src/Bosco/Version.gs
            src/DarkMatter.vala
            src/Utils/UUID.vala
            src/game/Components.gs
            src/game/Entities.gs
            src/game/Game.gs
            src/game/systems/CollisionSystem.gs
            src/game/systems/ColorTweenSystem.gs
            src/game/systems/DestroySystem.gs
            src/game/systems/EntitySpawningTimerSystem.gs
            src/game/systems/ExpiringSystem.gs
            src/game/systems/HudRenderSystem.gs
            src/game/systems/MovementSystem.gs
            src/game/systems/PlayerInputSystem.gs
            src/game/systems/RemoveOffscreenShipsSystem.gs
            src/game/systems/RenderPositionSystem.gs
            src/game/systems/ScaleTweenSystem.gs
            src/game/systems/SoundEffectSystem.gs
            src/game/systems/ViewManagerSystem.gs
        PACKAGES
            gee-0.8
            gio-2.0
            glib-2.0
            gobject-2.0
        CUSTOM_VAPIS
            src/vapis/sdl2.vapi
            src/vapis/SDL2_image.vapi
            src/vapis/SDL2_mixer.vapi
            src/vapis/SDL2_ttf.vapi
        OPTIONS
            --vapidir=${CMAKE_SOURCE_DIR}/src/vapis
            -g
    )

    # phase II - compile and link all the ccode
    find_package (SDL2 REQUIRED COMPONENTS main)
    find_package (SDL2_image REQUIRED)
    find_package (SDL2_mixer REQUIRED)
    find_package (SDL2_ttf REQUIRED)
    
    # set include directories
    include_directories (
        ${SDL2_INCLUDE_DIRS} 
        ${SDL2main_INCLUDE_DIRS} 
        ${CMAKE_BINARY_DIR}
    )

    # name the executable
    add_executable (${EXEC_NAME} ${VALA_C})

    # link libraries
    target_link_libraries (
        ${EXEC_NAME} 
        ${SDL2_LIBS} 
    )

    if (WIN32)
        set_target_properties (${EXEC_NAME} PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS")
    endif ()
        
    # install the binaries we just made
    install (TARGETS ${EXEC_NAME} RUNTIME DESTINATION bin)

    # Copy SDL2 DLLs to output folder on Windows
    # if (WIN32)
    # foreach (DLL ${SDL2_DLLS})
    #     add_custom_command (TARGET ${EXEC_NAME} POST_BUILD COMMAND
    #         ${CMAKE_COMMAND} -E copy_if_different ${DLL} $<TARGET_FILE_DIR:${EXEC_NAME}>)
    # endforeach ()
    # endif ()


